#!/usr/bin/env python

from __future__ import annotations

from typing import List
from typing import Tuple

import sys
import subprocess


ALLOWED_TAGS = ['ci', 'feat', 'fix', 'perf', 'refactor', 'chore', 'other']


def parse_args() -> Tuple[str, str]:
    old_ref = sys.argv[2]
    new_ref = sys.argv[3]
    return old_ref, new_ref


def get_commit_subject(sha: str) -> str:
    data = subprocess.check_output(
        ['git', 'log', '-1', '--pretty=format:%s', sha])
    return data.decode()


def get_commit_shas(start_ref: str, end_ref: str) -> List[str]:
    arg = f'{start_ref}..{end_ref}'
    data = subprocess.check_output(['git', 'rev-list', arg])
    text = data.decode()
    text = text.strip()
    return text.split('\n')


def enforce_message_rules(subject: str) -> None:
    tag, subject = subject.split(': ', maxsplit=1)
    if tag not in ALLOWED_TAGS:
        print('Unknown commit message tag:', tag)
        sys.exit(1)

    if not subject[0].isupper():
        print('First letter after tag must be uppercase')
        sys.exit(1)


def main(args: Tuple[str, str]) -> None:
    shas = get_commit_shas(*args)
    for sha in shas:
        subject = get_commit_subject(sha)
        enforce_message_rules(subject)


if __name__ == "__main__":
    args = parse_args()
    main(args)
